{"ast":null,"code":"import { Component, createElement } from 'react';\nimport createReactContext from 'create-react-context';\nimport { driver, getInitialStyle } from 'styletron-standard';\n/* eslint-env browser */\n\n/* global module */\n\nfunction addDebugMetadata(instance, stackIndex) {\n  var _ref = new Error(\"stacktrace source\"),\n      stack = _ref.stack,\n      stacktrace = _ref.stacktrace,\n      message = _ref.message;\n\n  instance.debug = {\n    stackInfo: {\n      stack: stack,\n      stacktrace: stacktrace,\n      message: message\n    },\n    stackIndex: stackIndex\n  };\n}\n\nvar DebugEngine =\n/*#__PURE__*/\nfunction () {\n  function DebugEngine(worker) {\n    if (!worker) {\n      var workerBlob = new Blob([\"importScripts(\\\"https://unpkg.com/css-to-js-sourcemap-worker@2.0.4/worker.js\\\")\"], {\n        type: \"application/javascript\"\n      });\n      worker = new Worker(URL.createObjectURL(workerBlob));\n      worker.postMessage({\n        id: \"init_wasm\",\n        url: \"https://unpkg.com/css-to-js-sourcemap-worker@2.0.4/mappings.wasm\"\n      });\n      worker.postMessage({\n        id: \"set_render_interval\",\n        interval: 120\n      });\n\n      if (module.hot) {\n        module.hot.addStatusHandler(function (status) {\n          if (status === \"dispose\") {\n            worker.postMessage({\n              id: \"invalidate\"\n            });\n          }\n        });\n      }\n    }\n\n    this.worker = worker;\n    this.counter = 0;\n\n    this.worker.onmessage = function (msg) {\n      var _msg$data = msg.data,\n          id = _msg$data.id,\n          css = _msg$data.css;\n\n      if (id === \"render_css\" && css) {\n        var style = document.createElement(\"style\");\n        style.appendChild(document.createTextNode(css));\n        document.head.appendChild(style);\n      }\n    };\n  }\n\n  var _proto = DebugEngine.prototype;\n\n  _proto.debug = function debug(_ref2) {\n    var stackIndex = _ref2.stackIndex,\n        stackInfo = _ref2.stackInfo;\n    var className = \"__debug-\" + this.counter++;\n    this.worker.postMessage({\n      id: \"add_mapped_class\",\n      className: className,\n      stackInfo: stackInfo,\n      stackIndex: stackIndex\n    });\n    return className;\n  };\n\n  return DebugEngine;\n}();\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n/* eslint-disable no-unused-vars, no-redeclare, no-shadow */\n\n\nvar StyletronContext = createReactContext();\nvar HydrationContext = createReactContext(false);\nvar DebugEngineContext = createReactContext();\n\nvar DevProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DevProvider, _React$Component);\n\n  function DevProvider(props) {\n    var _this;\n\n    _this = _React$Component.call(this) || this;\n    _this.state = {\n      hydrating: Boolean(props.debugAfterHydration)\n    };\n    return _this;\n  }\n\n  var _proto = DevProvider.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    {\n      if (this.state.hydrating === true) {\n        this.setState({\n          hydrating: false\n        });\n      }\n    }\n  };\n\n  _proto.render = function render() {\n    return createElement(StyletronContext.Provider, {\n      value: this.props.value\n    }, createElement(DebugEngineContext.Provider, {\n      value: this.props.debug\n    }, createElement(HydrationContext.Provider, {\n      value: this.state.hydrating\n    }, this.props.children)));\n  };\n\n  return DevProvider;\n}(Component);\n\nvar Provider = true && process.env.NODE_ENV !== \"production\" ? DevProvider : StyletronContext.Provider; // TODO: more precise types\n\nfunction DevConsumer(props) {\n  return createElement(StyletronContext.Consumer, null, function (styletronEngine) {\n    return createElement(DebugEngineContext.Consumer, null, function (debugEngine) {\n      return createElement(HydrationContext.Consumer, null, function (hydrating) {\n        return props.children(styletronEngine, debugEngine, hydrating);\n      });\n    });\n  });\n}\n\nvar Consumer = true && process.env.NODE_ENV !== \"production\" ? DevConsumer : StyletronContext.Consumer;\n\nfunction createStyled(_ref) {\n  var getInitialStyle$$1 = _ref.getInitialStyle,\n      driver$$1 = _ref.driver,\n      wrapper = _ref.wrapper;\n\n  function styled(base, styleArg) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (base.__STYLETRON__) {\n        /* eslint-disable no-console */\n        console.warn(\"It appears you are passing a styled component into `styled`.\");\n        console.warn(\"For composition with existing styled components, use `withStyle`, `withStyleDeep`, or `withTransform` instead.\");\n        /* eslint-enable no-console */\n      }\n    }\n\n    var baseStyletron = {\n      reducers: [],\n      base: base,\n      driver: driver$$1,\n      getInitialStyle: getInitialStyle$$1,\n      wrapper: wrapper\n    };\n\n    if (true && process.env.NODE_ENV !== \"production\") {\n      addDebugMetadata(baseStyletron, 2);\n    }\n\n    return createStyledElementComponent(autoComposeShallow(baseStyletron, styleArg));\n  }\n\n  return styled;\n}\n\nvar styled = createStyled({\n  getInitialStyle: getInitialStyle,\n  driver: driver,\n  wrapper: function wrapper(Component$$1) {\n    return Component$$1;\n  }\n});\n\nfunction withTransform(component, transformer) {\n  var styletron = component.__STYLETRON__;\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    addDebugMetadata(styletron, 2);\n  }\n\n  return createStyledElementComponent(composeDynamic(styletron, transformer));\n}\n\nfunction withStyle(component, styleArg) {\n  var styletron = component.__STYLETRON__;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!styletron) {\n      /* eslint-disable no-console */\n      console.warn(\"The first parameter to `withStyle` must be a styled component (without extra wrappers).\");\n      /* eslint-enable no-console */\n    }\n  }\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    addDebugMetadata(styletron, 2);\n  }\n\n  return createStyledElementComponent(autoComposeShallow(styletron, styleArg));\n}\n\nfunction withStyleDeep(component, styleArg) {\n  var styletron = component.__STYLETRON__;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!styletron) {\n      /* eslint-disable no-console */\n      console.warn(\"The first parameter to `withStyleDeep` must be a styled component (without extra wrappers).\");\n      /* eslint-enable no-console */\n    }\n  }\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    addDebugMetadata(styletron, 2);\n  }\n\n  return createStyledElementComponent(autoComposeDeep(styletron, styleArg));\n}\n\nfunction withWrapper(component, wrapper) {\n  var styletron = component.__STYLETRON__;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!styletron) {\n      /* eslint-disable no-console */\n      console.warn(\"The first parameter to `withWrapper` must be a styled component (without extra wrappers).\");\n      /* eslint-enable no-console */\n    }\n  }\n\n  var composed = {\n    getInitialStyle: styletron.getInitialStyle,\n    base: styletron.base,\n    driver: styletron.driver,\n    wrapper: wrapper,\n    reducers: styletron.reducers\n  };\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    addDebugMetadata(composed, 2);\n  }\n\n  return createStyledElementComponent(composed);\n}\n\nfunction autoComposeShallow(styletron, styleArg) {\n  if (typeof styleArg === \"function\") {\n    return dynamicComposeShallow(styletron, styleArg);\n  }\n\n  return staticComposeShallow(styletron, styleArg);\n}\n\nfunction autoComposeDeep(styletron, styleArg) {\n  if (typeof styleArg === \"function\") {\n    return dynamicComposeDeep(styletron, styleArg);\n  }\n\n  return staticComposeDeep(styletron, styleArg);\n}\n\nfunction staticComposeShallow(styletron, style) {\n  return composeStatic(styletron, createShallowMergeReducer(style));\n}\n\nfunction staticComposeDeep(styletron, style) {\n  return composeStatic(styletron, createDeepMergeReducer(style));\n}\n\nfunction dynamicComposeShallow(styletron, styleFn) {\n  return composeDynamic(styletron, function (style, props) {\n    return shallowMerge(style, styleFn(props));\n  });\n}\n\nfunction dynamicComposeDeep(styletron, styleFn) {\n  return composeDynamic(styletron, function (style, props) {\n    return deepMerge(style, styleFn(props));\n  });\n}\n\nfunction createShallowMergeReducer(style) {\n  return {\n    reducer: function reducer(inputStyle) {\n      return shallowMerge(inputStyle, style);\n    },\n    assignmentCommutative: true,\n    factory: createShallowMergeReducer,\n    style: style\n  };\n}\n\nfunction createDeepMergeReducer(style) {\n  return {\n    reducer: function reducer(inputStyle) {\n      return deepMerge(inputStyle, style);\n    },\n    assignmentCommutative: true,\n    factory: createDeepMergeReducer,\n    style: style\n  };\n}\n\nfunction composeStatic(styletron, reducerContainer) {\n  if (styletron.reducers.length === 0) {\n    var style = reducerContainer.reducer(styletron.getInitialStyle(), {});\n    var result = {\n      reducers: styletron.reducers,\n      base: styletron.base,\n      driver: styletron.driver,\n      wrapper: styletron.wrapper,\n      getInitialStyle: function getInitialStyle$$1() {\n        return style;\n      }\n    };\n\n    if (true && process.env.NODE_ENV !== \"production\") {\n      result.debug = styletron.debug;\n    }\n\n    return result;\n  } else {\n    var last = styletron.reducers[0];\n\n    if (last.assignmentCommutative === true && reducerContainer.assignmentCommutative === true) {\n      var composed = reducerContainer.reducer(last.style);\n      var _result = {\n        getInitialStyle: styletron.getInitialStyle,\n        base: styletron.base,\n        driver: styletron.driver,\n        wrapper: styletron.wrapper,\n        reducers: [last.factory(composed)].concat(styletron.reducers.slice(1))\n      };\n\n      if (true && process.env.NODE_ENV !== \"production\") {\n        _result.debug = styletron.debug;\n      }\n\n      return _result;\n    }\n\n    return composeDynamic(styletron, reducerContainer.reducer);\n  }\n}\n\nfunction composeDynamic(styletron, reducer) {\n  var composed = {\n    getInitialStyle: styletron.getInitialStyle,\n    base: styletron.base,\n    driver: styletron.driver,\n    wrapper: styletron.wrapper,\n    reducers: [{\n      assignmentCommutative: false,\n      reducer: reducer\n    }].concat(styletron.reducers)\n  };\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    composed.debug = styletron.debug;\n  }\n\n  return composed;\n}\n\nfunction createStyledElementComponent(styletron) {\n  var reducers = styletron.reducers,\n      base = styletron.base,\n      driver$$1 = styletron.driver,\n      wrapper = styletron.wrapper,\n      getInitialStyle$$1 = styletron.getInitialStyle;\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    var debugStackInfo, debugStackIndex;\n\n    if (styletron.debug) {\n      debugStackInfo = styletron.debug.stackInfo;\n      debugStackIndex = styletron.debug.stackIndex;\n    }\n  }\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    var debugClassName;\n  }\n\n  function StyledElement(props) {\n    return createElement(Consumer, null, function (styletron, debugEngine, hydrating) {\n      if (process.env.NODE_ENV !== \"production\" && styletron === void 0) {\n        throw new Error(\"\\nA Styletron styled component was rendered, but no Styletron engine instance was provided in React context.\\n\\nDid you forget to provide a Styletron engine instance to React context via using the Styletron provider component?\\n\\nNote: Providers and Consumers must come from the exact same React.createContext call to work.\\nIf your app has multiple instances of the \\\"styletron-react-core\\\" package in your node_module tree,\\nyour Provider may be coming from a different React.createContext call, which means the styled components\\nwill not recieve the provided engine instance. This scenario can arise, for example, when using \\\"npm link\\\".\\n\");\n      }\n\n      var elementProps = omitPrefixedKeys(props);\n      var style = resolveStyle(getInitialStyle$$1, reducers, props);\n      var styleClassString = driver$$1(style, styletron);\n      var Element = props.$as ? props.$as : base;\n      elementProps.className = props.className ? props.className + \" \" + styleClassString : styleClassString;\n\n      if (true && process.env.NODE_ENV !== \"production\" && debugEngine && !hydrating) {\n        if (!debugClassName) {\n          debugClassName = debugEngine.debug({\n            stackInfo: debugStackInfo,\n            stackIndex: debugStackIndex\n          });\n        }\n\n        var joined = debugClassName + \" \" + elementProps.className;\n        elementProps.className = joined;\n      }\n\n      if (props.$ref) {\n        elementProps.ref = props.$ref;\n      }\n\n      return createElement(Element, elementProps);\n    });\n  }\n\n  var Wrapped = wrapper(StyledElement);\n  Wrapped.__STYLETRON__ = {\n    base: base,\n    reducers: reducers,\n    driver: driver$$1,\n    wrapper: wrapper,\n    getInitialStyle: getInitialStyle$$1\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var displayName;\n\n    if (typeof base === \"string\") {\n      displayName = base;\n    } else if (base.displayName) {\n      displayName = base.displayName;\n    } else if (base.name) {\n      displayName = base.name;\n    } else {\n      displayName = \"Unknown\";\n    }\n\n    Wrapped.displayName = \"Styled(\" + displayName + \")\";\n  }\n\n  return Wrapped;\n} // Utility functions\n\n\nfunction resolveStyle(getInitialStyle$$1, reducers, props) {\n  var result = getInitialStyle$$1();\n  var i = reducers.length;\n\n  while (i--) {\n    result = reducers[i].reducer(result, props);\n  }\n\n  return result;\n}\n\nfunction isObject(x) {\n  return _typeof(x) === \"object\" && x !== null;\n}\n\nfunction omitPrefixedKeys(source) {\n  var result = {};\n\n  for (var key in source) {\n    if (key[0] !== \"$\") {\n      result[key] = source[key];\n    }\n  }\n\n  return result;\n}\n\nfunction deepMerge(a, b) {\n  var result = assign({}, a);\n\n  for (var key in b) {\n    var val = b[key];\n\n    if (isObject(val) && isObject(a[key])) {\n      result[key] = deepMerge(a[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  return result;\n}\n\nfunction shallowMerge(a, b) {\n  return assign(assign({}, a), b);\n}\n\nfunction assign(target, source) {\n  for (var key in source) {\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nexport { DebugEngine, Provider, DevConsumer, createStyled, styled, withTransform, withStyle, withStyleDeep, withWrapper, autoComposeShallow, autoComposeDeep, staticComposeShallow, staticComposeDeep, dynamicComposeShallow, dynamicComposeDeep, createShallowMergeReducer, createDeepMergeReducer, composeStatic, composeDynamic, createStyledElementComponent, resolveStyle };","map":null,"metadata":{},"sourceType":"module"}